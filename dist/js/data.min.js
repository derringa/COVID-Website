/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js!./src/scss/data.scss":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src??ref--4-2!./node_modules/sass-loader/dist/cjs.js!./src/scss/data.scss ***!
  \*****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#map {\n  width: 100%;\n  height: 60vh; }\n  #map img {\n    border: none;\n    min-width: 0; }\n\n#map-box {\n  width: 100%;\n  overflow: auto;\n  background-color: #fdcb73;\n  padding: 2% 5%;\n  margin: 5% auto;\n  border-radius: 5px; }\n  #map-box img {\n    width: 50%; }\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js!./src/scss/home.scss":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src??ref--4-2!./node_modules/sass-loader/dist/cjs.js!./src/scss/home.scss ***!
  \*****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
var ___CSS_LOADER_GET_URL_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
var ___CSS_LOADER_URL_IMPORT_0___ = __webpack_require__(/*! ../img/nasa-unsplash.jpg */ "./src/img/nasa-unsplash.jpg");
var ___CSS_LOADER_URL_IMPORT_1___ = __webpack_require__(/*! ../img/markus-spiske-unsplash.jpg */ "./src/img/markus-spiske-unsplash.jpg");
var ___CSS_LOADER_URL_IMPORT_2___ = __webpack_require__(/*! ../img/jack-hamilton-unsplash.jpg */ "./src/img/jack-hamilton-unsplash.jpg");
exports = ___CSS_LOADER_API_IMPORT___(false);
var ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_2___);
// Module
exports.push([module.i, "body {\n  background-color: white;\n  margin: 0px;\n  font-family: \"Times New Roman\", Times, serif;\n  font-size: 1rem;\n  font-weight: 400;\n  width: 100%; }\n\na {\n  text-decoration: none; }\n\n.header {\n  width: 100%;\n  min-height: 70px;\n  padding-top: 3%;\n  background: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") no-repeat center center fixed;\n  background-size: cover;\n  color: #ffffff; }\n\nnav {\n  float: center;\n  background-color: #011f4b;\n  width: 100%;\n  margin-top: 5%;\n  padding: 2px 0%; }\n  nav .navbar {\n    margin-left: 10.3%;\n    margin-top: 1%;\n    width: 75%;\n    display: flex;\n    justify-content: space-around; }\n    nav .navbar li {\n      display: inline-block; }\n      nav .navbar li a {\n        text-decoration: none;\n        color: rgba(255, 255, 255, 0.8);\n        font-weight: normal; }\n        nav .navbar li a:hover {\n          color: #ffffff; }\n\n.title-box {\n  background-color: rgba(46, 45, 45, 0.6);\n  text-align: center;\n  width: 40%;\n  padding: 3%;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 3px; }\n\n#background-thing {\n  width: 100%;\n  min-height: 600px;\n  padding-top: 3%;\n  background: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") no-repeat top center fixed;\n  background-size: cover; }\n\n.container {\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: white;\n  color: black; }\n\n.textContainer {\n  width: 90%;\n  margin-left: auto;\n  margin-right: auto;\n  text-align: center;\n  padding: 2%; }\n  .textContainer p {\n    text-align: justify; }\n  .textContainer ul {\n    text-align: left; }\n  .textContainer img {\n    display: inline-block;\n    margin: 0 auto;\n    padding: 2%;\n    min-width: 40px;\n    width: 70%; }\n    .textContainer img #img100 {\n      margin-left: 20px;\n      width: 100%;\n      min-width: 90px; }\n    .textContainer img #pacman {\n      margin-left: 20px;\n      width: 80%;\n      min-width: 90px; }\n\n.container-but-yellow {\n  min-height: 400px;\n  width: 100%;\n  background-color: #fdbe51; }\n\n.flex-center {\n  display: flex;\n  justify-content: center; }\n  .flex-center div {\n    padding: 15px;\n    width: 50%;\n    margin: 5px; }\n\n#resources p {\n  text-align: center; }\n\n#resources #resource-buttons {\n  padding-top: 20px;\n  text-align: center;\n  display: flex;\n  justify-content: space-around; }\n  #resources #resource-buttons a {\n    display: inline-block; }\n\n#resources .btn-primary {\n  background-color: #011f4b;\n  border-color: #001b43;\n  color: rgba(255, 255, 255, 0.8);\n  width: 200px; }\n  #resources .btn-primary:hover {\n    background-color: #b3cde0;\n    color: #03396c; }\n\n#resources .dropdown {\n  margin-left: auto;\n  margin-right: auto; }\n  #resources .dropdown .btn-primary:not(:disabled):not(.disabled).active, #resources .dropdown .btn-primary:not(:disabled):not(.disabled):active, #resources .dropdown .show > .btn-primary.dropdown-toggle {\n    background-color: #b3cde0;\n    color: #001b43; }\n  #resources .dropdown .btn-primary:hover {\n    background-color: #b3cde0;\n    color: #001b43; }\n  #resources .dropdown .dropdown-menu {\n    color: #001b43;\n    height: 200px;\n    overflow-y: auto;\n    width: 75%; }\n    #resources .dropdown .dropdown-menu a {\n      color: #001b43;\n      margin-left: 2%; }\n\nform {\n  width: 90%;\n  overflow: auto;\n  background-color: #fdcb73;\n  padding: 2% 5%;\n  margin: 5% auto;\n  border-radius: 5px; }\n  form ol {\n    width: 90%;\n    padding: 2%;\n    margin-left: auto;\n    margin-right: auto;\n    text-align: left; }\n  form li {\n    padding: 2%; }\n  form img {\n    display: inline-block;\n    vertical-align: middle;\n    width: 70%;\n    min-width: 90px;\n    margin: 0 auto;\n    padding: 2%; }\n\nselect {\n  margin-left: 25%;\n  width: 45%; }\n\ninput[type=submit] {\n  padding: 12px 20px;\n  border-style: solid;\n  border-color: #001b43;\n  background-color: #011f4b;\n  color: rgba(255, 255, 255, 0.8);\n  border-radius: 4px;\n  cursor: pointer;\n  margin-right: auto;\n  margin-left: auto; }\n  input[type=submit]:hover {\n    background-color: rgba(255, 255, 255, 0.8);\n    border-color: #03396c;\n    color: #03396c; }\n\ninput[type=text] {\n  width: 45%;\n  margin-left: 25%; }\n\nfooter {\n  width: 100%;\n  background: url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ") no-repeat center center fixed;\n  background-size: cover;\n  color: #ffffff;\n  bottom: 0;\n  padding: 1%; }\n  footer ul {\n    width: 90%;\n    margin-left: auto;\n    margin-right: auto;\n    text-align: center;\n    padding: 2%;\n    list-style: none;\n    color: white;\n    font-size: small; }\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    // eslint-disable-next-line no-param-reassign
    options = {};
  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign


  url = url && url.__esModule ? url.default : url;

  if (typeof url !== 'string') {
    return url;
  } // If url is already wrapped in quotes, remove them


  if (/^['"].*['"]$/.test(url)) {
    // eslint-disable-next-line no-param-reassign
    url = url.slice(1, -1);
  }

  if (options.hash) {
    // eslint-disable-next-line no-param-reassign
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, '\\n'), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : undefined;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && btoa) {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./src/img/jack-hamilton-unsplash.jpg":
/*!********************************************!*\
  !*** ./src/img/jack-hamilton-unsplash.jpg ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "f365e5a4bc473a8886d0b1cbaec22ee7.jpg");

/***/ }),

/***/ "./src/img/markus-spiske-unsplash.jpg":
/*!********************************************!*\
  !*** ./src/img/markus-spiske-unsplash.jpg ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "59f28e97e44401dd30de5d165a729ae0.jpg");

/***/ }),

/***/ "./src/img/nasa-unsplash.jpg":
/*!***********************************!*\
  !*** ./src/img/nasa-unsplash.jpg ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "ddae4d58bf65a1c53e3335446f5daceb.jpg");

/***/ }),

/***/ "./src/js/data.js":
/*!************************!*\
  !*** ./src/js/data.js ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _scss_home_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/home.scss */ "./src/scss/home.scss");
/* harmony import */ var _scss_home_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_scss_home_scss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _scss_data_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scss/data.scss */ "./src/scss/data.scss");
/* harmony import */ var _scss_data_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_scss_data_scss__WEBPACK_IMPORTED_MODULE_1__);



function stateCode(state){
    /*
    Convert the various ways states can be represented in the geocoder response to a 2 letter state code.
    */
    let stateCodeUnification = {
        'al': 'al',
        'alabama': 'al',
        'az': 'az',
        'arizona': 'az',
        'ar': 'ar',
        'arkansas': 'ar',
        'ak': 'ak',
        'alaska': 'ak',
        'ca': 'ca',
        'california': 'ca',
        'co': 'co',
        'colorado': 'co',
        'ct': 'ct',
        'connecticut': 'ct',
        'de': 'de',
        'delaware': 'de',
        'fl': 'fl',
        'florida': 'fl',
        'ga': 'ga',
        'georgia': 'ga',
        'id': 'id',
        'idaho': 'id',
        'il': 'il',
        'illinois': 'il',
        'in': 'in',
        'indiana': 'in',
        'ia': 'ia',
        'iowa': 'iowa',
        'ks': 'ks',
        'kansas': 'ks',
        'ky': 'ky',
        'kentucky': 'ky',
        'la': 'la',
        'louisiana': 'la',
        'me': 'me',
        'maine': 'me',
        'md': 'md',
        'maryland': 'md',
        'ma': 'ma',
        'massachusetts': 'ma',
        'mi': 'mi',
        'michigan': 'mi',
        'mn': 'mn',
        'minnesota': 'mn',
        'ms': 'ms',
        'mississippi': 'ms',
        'mo': 'mo',
        'missouri': 'mo',
        'mt': 'mt',
        'montana': 'mt',
        'ne': 'ne',
        'nebraska': 'ne',
        'nv': 'nv',
        'nevada': 'nv',
        'nh': 'nh',
        'new hampshire': 'nh',

        'hawaii': 'hi',
        'hi': 'hi',

        'nj': 'nj',
        'new jersey': 'nj',
        'nm': 'nm',
        'new mexico': 'nm',
        'ny': 'ny',
        'new york': 'ny',
        'nc': 'nc',
        'north carolina': 'nc',
        'nd': 'nd',
        'north dakota': 'nd',
        'oh': 'oh',
        'ohio': 'oh',
        'ok': 'ok',
        'oklahoma': 'ok',
        'or': 'or',
        'oregon': 'or',
        'pa': 'pa',
        'pennsylvania': 'pa',
        'ri': 'ri',
        'rhode island': 'ri',
        'sc': 'sc',
        'south carolina': 'sc',
        'sd': 'sd',
        'south dakota': 'sd',
        'tennessee': 'tn',
        'tn': 'tn',
        'texas': 'tx',
        'tx': 'tx',
        'utah': 'ut',
        'ut': 'ut',
        'vermont': 'vt',
        'vt': 'vt',
        'virginia': 'va',
        'va': 'va',
        'washington': 'wa',
        'wa': 'wa',
        'west virginia': 'wv',
        'wv': 'wv',
        'wisconsin': 'wi',
        'wi': 'wi',
        'wyoming': 'wy',
        'wy': 'wy'
    };
    return stateCodeUnification[state.toLowerCase()];
}

function stateName(state){
    /*
    Convert the various ways states can be represented in the geocoder response to a 2 letter state code.
    */
    let stateCodeUnification = {
        'al': 'Alabama',
        'az': 'Arizona',
        'ar': 'Arkansas',
        'ak': 'Alaska',
        'ca': 'California',
        'co': 'Colorado',
        'ct': 'Connecticut',
        'de': 'Delaware',
        'florida': 'Florida',
        'ga': 'Georgia',
        'hi': 'Hawaii',
        'id': 'Idaho',
        'il': 'Illinois',
        'in': 'Indiana',
        'ia': 'Iowa',
        'ks': 'Kansas',
        'ky': 'Kentucky',
        'la': 'Louisiana',
        'me': 'Maine',
        'md': 'Maryland',
        'ma': 'Massachusetts',
        'mi': 'Michigan',
        'mn': 'Minnesota',
        'ms': 'Mississippi',
        'mo': 'Missouri',
        'mt': 'Montana',
        'ne': 'Nebraska',
        'nv': 'Nevada',
        'nh': 'New Hampshire',
        'nj': 'New Jersey',
        'nm': 'New Mexico',
        'ny': 'New York',
        'nc': 'North Carolina',
        'nd': 'North Dakota',
        'oh': 'Ohio',
        'ok': 'Oklahoma',
        'or': 'Oregon',
        'pa': 'Pennsylvania',
        'ri': 'Rhode Island',
        'sc': 'South Carolina',
        'sd': 'South Dakota',
        'tn': 'Tennessee',
        'tx': 'Texas',
        'ut': 'Utah',
        'vt': 'Vermont',
        'va': 'Virginia',
        'wa': 'Washington',
        'wv': 'West Virginia',
        'wi': 'Wisconsin',
        'wy': 'Wyoming'
    };
    return stateCodeUnification[state];
}

document.addEventListener('DOMContentLoaded', () => {
    const MAPAPIKEY = 'AIzaSyBpXm7Z_Rr99Ki3_iB4vHpZlPBicXqrvIk';
    // Create the script tag, set the appropriate attributes
    var script = document.createElement('script');
    script.src = `https://maps.googleapis.com/maps/api/js?key=${MAPAPIKEY}&callback=initMap`;
    script.defer = true;
    script.async = true;

    // Attach your callback function to the `window` object

    window.initMap = function() {
    // JS API is loaded and available
        let myLatlng = { lat: 39.50, lng: -98.35 }

        let map = new google.maps.Map(document.getElementById("map"), {
            center: myLatlng,
            zoom: 3
        });

        // Create the initial InfoWindow telling user to click the map at the location they want
        var infoWindow = new google.maps.InfoWindow(
        {content: 'Click on your state to get state info!', position: myLatlng});
        infoWindow.open(map);

        /* Set up geocoder */
        var geocoder = new google.maps.Geocoder;

        // Set up chart.js
        let chartjs = document.createElement('script');
        chartjs.src = 'https://cdn.jsdelivr.net/npm/chart.js@2.8.0';
        document.getElementsByTagName('head')[0].appendChild(chartjs);

        // Configure the click listener.
        map.addListener('click', function(mapsMouseEvent) {
            // Close the current InfoWindow.
            infoWindow.close();
        
            // Create a new InfoWindow.
            infoWindow = new google.maps.InfoWindow({position: mapsMouseEvent.latLng});
            geocodeLatLng(map, mapsMouseEvent.latLng, geocoder, (result)=>{
                getData(stateCode(result));
            }); 
        });
    };

    /* Handle invalid map locations */
    function invalidLocation(){
        document.getElementById('data-box').innerHTML = '';
        let oldChart = document.getElementById('line-chart');
        if(oldChart){
            oldChart.parentNode.removeChild(oldChart);
        }

        let invalidState = document.createElement('h3');
        invalidState.innerText = "The place you chose is not a valid state. Please select a valid US state to display data."
        document.getElementById('data-box').appendChild(invalidState);

    }
    /* Covert latitude and longitude to a state */
    function geocodeLatLng(map, latLong, geocoder, callback) {
        geocoder.geocode({'location': latLong}, function(result, status) {
            /* Does stuff if the geocode is valid */
            if (status === 'OK') {
                if (result[0]) {
                    placeMarker(latLong, map);
                    let address = result[0]['formatted_address'];
                    if (address.slice(address.length-3, address.length) == 'USA'){
                        let splitAddress = address.split(',');
                        let state = splitAddress[ splitAddress.length - 2].split(' ')[1];
                        callback(state);
                    }else{
                        invalidLocation();
                    }
                } else {
                    invalidLocation();
                }
            } else {
                invalidLocation();
            }
        });
    }

    /* Puts and updates the red place marker on the map */
    let marker;
    function placeMarker(latlng, map){
        if (marker){
            marker.setPosition(latlng);
        } else {
            marker = new google.maps.Marker({
                position: latlng,
                map: map
            });
        }
    }


    //
    //
    // Get Data
    //
    //
    let graph;

    function getData(state){
        let url = `/getState?state=${state}&historic=true`;
        fetch(url)
        .then(result => result.json())
        .then(res => {
            putDataInDocument(res[0]);
            graph = makeGraph(res, graph);
        })
    }

    function addData(name, stat){
        let statsElement = document.createElement('h3');
        if (stat === null) {
            stat = 'Unrecorded';
        }
        statsElement.innerText = name + stat;
        return statsElement
    }

    function putDataInDocument(data){
        let dataArea = document.getElementById('data-box');
        dataArea.innerHTML = '';
        let stateTitle = document.createElement('h2');
        stateTitle.innerText = 'Data for ' + stateName(data['state'].toLowerCase())+':';
        dataArea.appendChild(stateTitle);
        
        // New Covid Cases Today
        dataArea.appendChild(addData('New Cases Today: ',data['positiveIncrease']));

        // Total Deaths Today
        dataArea.appendChild(addData('Total Deaths Today: ',data['deathIncrease']));

        // Cumulative Deaths
        dataArea.appendChild(addData('Cumulative deaths: ',data['death']));

        // Currently Hospitalized
        dataArea.appendChild(addData('Patients Currently Hospitalized: ',data['hospitalizedCurrently']));

        // COVID patients in ICU
        dataArea.appendChild(addData('Patient currently in ICU: ',data['inIcuCurrently']));
    };

    
    function makeGraph(dataArray, oldGraph){
        let days = [];
        let positive = [];
        let death = [];
        for (let day of dataArray){
            days.push(day['date']);
            death.push(day['death']);
            positive.push(day['positive']);
        }
        days.reverse()
        death.reverse()
        positive.reverse();
        // Destroy the old canvas/chart and create a new one.
        let oldChart = document.getElementById('line-chart');
        if(oldChart){
            oldChart.parentNode.removeChild(oldChart);
        }

        let newChart = document.createElement('canvas');
        newChart.width = "800";
        newChart.height = "450";
        newChart.id = "line-chart";

        document.getElementById('line-chart-div').appendChild(newChart);
        

        graph = new Chart(document.getElementById('line-chart'), {
            type: 'line',
            data: {
              labels: days,
              datasets: [{ 
                  data: positive,
                  label: "Total Cases",
                  borderColor: "#3e95cd",
                  fill: false
                }, { 
                  data: death,
                  label: "Total Deaths",
                  borderColor: "#8e5ea2",
                  fill: false
                }
              ]
            },
            options: {
              title: {
                display: true,
                text: 'Covid Data for ' + stateName(dataArray[0]['state'].toLowerCase())
              }
            }
          });
    }


    // Append the 'script' element to 'head'
    document.head.appendChild(script);
})


/***/ }),

/***/ "./src/scss/data.scss":
/*!****************************!*\
  !*** ./src/scss/data.scss ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/src??ref--4-2!../../node_modules/sass-loader/dist/cjs.js!./data.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js!./src/scss/data.scss");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ }),

/***/ "./src/scss/home.scss":
/*!****************************!*\
  !*** ./src/scss/home.scss ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/src??ref--4-2!../../node_modules/sass-loader/dist/cjs.js!./home.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js!./src/scss/home.scss");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ }),

/***/ 1:
/*!******************************!*\
  !*** multi ./src/js/data.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./src/js/data.js */"./src/js/data.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Njc3MvZGF0YS5zY3NzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL2hvbWUuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWcvamFjay1oYW1pbHRvbi11bnNwbGFzaC5qcGciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9tYXJrdXMtc3Bpc2tlLXVuc3BsYXNoLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1nL25hc2EtdW5zcGxhc2guanBnIiwid2VicGFjazovLy8uL3NyYy9qcy9kYXRhLmpzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL2RhdGEuc2Nzcz9mOTBhIiwid2VicGFjazovLy8uL3NyYy9zY3NzL2hvbWUuc2Nzcz82ZmNjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7UUFBQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDBDQUEwQyxnQ0FBZ0M7UUFDMUU7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSx3REFBd0Qsa0JBQWtCO1FBQzFFO1FBQ0EsaURBQWlELGNBQWM7UUFDL0Q7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtR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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLFVBQVU7QUFDMUU7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCOztBQUV4QjtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQSxTQUFTLHNFQUFzRTtBQUMvRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscURBQXFELGdDQUFnQztBQUNyRjtBQUNBO0FBQ0EsYUFBYSxFO0FBQ2IsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsMEJBQTBCLG9CQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDLE1BQU07QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixHO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7OztBQUdBO0FBQ0E7QUFDQSxDQUFDOzs7Ozs7Ozs7Ozs7QUN0WEQsVUFBVSxtQkFBTyxDQUFDLHNKQUEyRTtBQUM3RiwwQkFBMEIsbUJBQU8sQ0FBQyx3U0FBNko7O0FBRS9MOztBQUVBO0FBQ0EsMEJBQTBCLFFBQVM7QUFDbkM7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7OztBQUlBLHNDOzs7Ozs7Ozs7OztBQ2xCQSxVQUFVLG1CQUFPLENBQUMsc0pBQTJFO0FBQzdGLDBCQUEwQixtQkFBTyxDQUFDLHdTQUE2Sjs7QUFFL0w7O0FBRUE7QUFDQSwwQkFBMEIsUUFBUztBQUNuQzs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOzs7O0FBSUEsc0MiLCJmaWxlIjoiLi9qcy9kYXRhLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiI21hcCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogNjB2aDsgfVxcbiAgI21hcCBpbWcge1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIG1pbi13aWR0aDogMDsgfVxcblxcbiNtYXAtYm94IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRjYjczO1xcbiAgcGFkZGluZzogMiUgNSU7XFxuICBtYXJnaW46IDUlIGF1dG87XFxuICBib3JkZXItcmFkaXVzOiA1cHg7IH1cXG4gICNtYXAtYm94IGltZyB7XFxuICAgIHdpZHRoOiA1MCU7IH1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IHJlcXVpcmUoXCIuLi9pbWcvbmFzYS11bnNwbGFzaC5qcGdcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSByZXF1aXJlKFwiLi4vaW1nL21hcmt1cy1zcGlza2UtdW5zcGxhc2guanBnXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gcmVxdWlyZShcIi4uL2ltZy9qYWNrLWhhbWlsdG9uLXVuc3BsYXNoLmpwZ1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18pO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJib2R5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgbWFyZ2luOiAwcHg7XFxuICBmb250LWZhbWlseTogXFxcIlRpbWVzIE5ldyBSb21hblxcXCIsIFRpbWVzLCBzZXJpZjtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICB3aWR0aDogMTAwJTsgfVxcblxcbmEge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XFxuXFxuLmhlYWRlciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1pbi1oZWlnaHQ6IDcwcHg7XFxuICBwYWRkaW5nLXRvcDogMyU7XFxuICBiYWNrZ3JvdW5kOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyIGZpeGVkO1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG4gIGNvbG9yOiAjZmZmZmZmOyB9XFxuXFxubmF2IHtcXG4gIGZsb2F0OiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDExZjRiO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXJnaW4tdG9wOiA1JTtcXG4gIHBhZGRpbmc6IDJweCAwJTtcXG4gIC8qLmd1bnJvY2tQaWM6OmFmdGVyIHtcXHJcXG4gICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL2ltZy9ndW5yb2NrTmF2LmpwZyk7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcclxcbiAgICAgICAgd2lkdGg6IDRyZW07XFxyXFxuICAgICAgICBoZWlnaHQ6IDRyZW07XFxyXFxuICAgIH0gKi8gfVxcblxcbi5uYXZiYXIge1xcbiAgbWFyZ2luLWxlZnQ6IDEwLjMlO1xcbiAgbWFyZ2luLXRvcDogMSU7XFxuICB3aWR0aDogNzUlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kOyB9XFxuICAubmF2YmFyIGxpIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxuICAgIC5uYXZiYXIgbGkgYSB7XFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgICAgIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCk7XFxuICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDsgfVxcbiAgICAgIC5uYXZiYXIgbGkgYTpob3ZlciB7XFxuICAgICAgICBjb2xvcjogI2ZmZmZmZjsgfVxcblxcbi50aXRsZS1ib3gge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg0NiwgNDUsIDQ1LCAwLjYpO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2lkdGg6IDQwJTtcXG4gIHBhZGRpbmc6IDMlO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxuICBib3JkZXItcmFkaXVzOiAzcHg7IH1cXG5cXG4jYmFja2dyb3VuZC10aGluZyB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1pbi1oZWlnaHQ6IDYwMHB4O1xcbiAgcGFkZGluZy10b3A6IDMlO1xcbiAgYmFja2dyb3VuZDogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyArIFwiKSBuby1yZXBlYXQgdG9wIGNlbnRlciBmaXhlZDtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7IH1cXG5cXG4uY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGNvbG9yOiBibGFjazsgfVxcbiAgLmNvbnRhaW5lciB1bCB7XFxuICAgIHdpZHRoOiAxNSU7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87IH1cXG5cXG4jY3Jvd2Qge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1pbi13aWR0aDogOTBweDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgcGFkZGluZzogMiU7IH1cXG5cXG4jcGFjbWFuIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xcbiAgd2lkdGg6IDgwJTtcXG4gIG1pbi13aWR0aDogOTBweDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgcGFkZGluZzogMiU7IH1cXG5cXG4uZmxleC1jZW50ZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyOyB9XFxuICAuZmxleC1jZW50ZXIgZGl2IHtcXG4gICAgcGFkZGluZzogMTVweDtcXG4gICAgd2lkdGg6IDUwJTtcXG4gICAgbWFyZ2luOiA1cHg7IH1cXG5cXG4uY29udGFpbmVyLWJ1dC15ZWxsb3cge1xcbiAgbWluLWhlaWdodDogNDAwIHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmRiZTUxOyB9XFxuXFxuI3Jlc291cmNlcyBwIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxcblxcbiNyZXNvdXJjZXMgI3Jlc291cmNlLWJ1dHRvbnMge1xcbiAgcGFkZGluZy10b3A6IDIwcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7IH1cXG4gICNyZXNvdXJjZXMgI3Jlc291cmNlLWJ1dHRvbnMgYSB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxcblxcbiNyZXNvdXJjZXMgLmJ0bi1wcmltYXJ5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMTFmNGI7XFxuICBib3JkZXItY29sb3I6ICMwMDFiNDM7XFxuICBjb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xcbiAgd2lkdGg6IDIwMHB4OyB9XFxuICAjcmVzb3VyY2VzIC5idG4tcHJpbWFyeTpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiM2NkZTA7XFxuICAgIGNvbG9yOiAjMDMzOTZjOyB9XFxuXFxuI3Jlc291cmNlcyAuZHJvcGRvd24ge1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBtYXJnaW4tcmlnaHQ6IGF1dG87IH1cXG4gICNyZXNvdXJjZXMgLmRyb3Bkb3duIC5idG4tcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKS5hY3RpdmUsICNyZXNvdXJjZXMgLmRyb3Bkb3duIC5idG4tcHJpbWFyeTpub3QoOmRpc2FibGVkKTpub3QoLmRpc2FibGVkKTphY3RpdmUsICNyZXNvdXJjZXMgLmRyb3Bkb3duIC5zaG93ID4gLmJ0bi1wcmltYXJ5LmRyb3Bkb3duLXRvZ2dsZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiM2NkZTA7XFxuICAgIGNvbG9yOiAjMDAxYjQzOyB9XFxuICAjcmVzb3VyY2VzIC5kcm9wZG93biAuYnRuLXByaW1hcnk6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjNjZGUwO1xcbiAgICBjb2xvcjogIzAwMWI0MzsgfVxcbiAgI3Jlc291cmNlcyAuZHJvcGRvd24gLmRyb3Bkb3duLW1lbnUge1xcbiAgICBjb2xvcjogIzAwMWI0MztcXG4gICAgaGVpZ2h0OiAyMDBweDtcXG4gICAgb3ZlcmZsb3cteTogYXV0bztcXG4gICAgd2lkdGg6IDc1JTsgfVxcbiAgICAjcmVzb3VyY2VzIC5kcm9wZG93biAuZHJvcGRvd24tbWVudSBhIHtcXG4gICAgICBjb2xvcjogIzAwMWI0MztcXG4gICAgICBtYXJnaW4tbGVmdDogMiU7IH1cXG5cXG4udGV4dENvbnRhaW5lciB7XFxuICB3aWR0aDogOTAlO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAyJTsgfVxcbiAgLnRleHRDb250YWluZXIgYSB7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxcbiAgLnRleHRDb250YWluZXIgcCB7XFxuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7IH1cXG5cXG5mb3JtIHtcXG4gIHdpZHRoOiA5MCU7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZGNiNzM7XFxuICBwYWRkaW5nOiAyJSA1JTtcXG4gIG1hcmdpbjogNSUgYXV0bztcXG4gIGJvcmRlci1yYWRpdXM6IDVweDsgfVxcbiAgZm9ybSBvbCB7XFxuICAgIHdpZHRoOiA5MCU7XFxuICAgIHBhZGRpbmc6IDIlO1xcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0OyB9XFxuICBmb3JtIGxpIHtcXG4gICAgcGFkZGluZzogMiU7IH1cXG4gIGZvcm0gaW1nIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgICB3aWR0aDogNzAlO1xcbiAgICBtaW4td2lkdGg6IDkwcHg7XFxuICAgIG1hcmdpbjogMCBhdXRvO1xcbiAgICBwYWRkaW5nOiAyJTsgfVxcblxcbnNlbGVjdCB7XFxuICBtYXJnaW4tbGVmdDogMjUlO1xcbiAgd2lkdGg6IDQ1JTsgfVxcblxcbmlucHV0W3R5cGU9c3VibWl0XSB7XFxuICBwYWRkaW5nOiAxMnB4IDIwcHg7XFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgYm9yZGVyLWNvbG9yOiAjMDAxYjQzO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAxMWY0YjtcXG4gIGNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCk7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxuICBtYXJnaW4tbGVmdDogYXV0bzsgfVxcbiAgaW5wdXRbdHlwZT1zdWJtaXRdOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xcbiAgICBib3JkZXItY29sb3I6ICMwMzM5NmM7XFxuICAgIGNvbG9yOiAjMDMzOTZjOyB9XFxuXFxuaW5wdXRbdHlwZT10ZXh0XSB7XFxuICB3aWR0aDogNDUlO1xcbiAgbWFyZ2luLWxlZnQ6IDI1JTsgfVxcblxcbmZvb3RlciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQ6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18gKyBcIikgbm8tcmVwZWF0IGNlbnRlciBjZW50ZXIgZml4ZWQ7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgY29sb3I6ICNmZmZmZmY7XFxuICBib3R0b206IDA7XFxuICBwYWRkaW5nOiAxJTtcXG4gIC8qY29sb3I6ICNmZmZmZmY7XFxyXFxuXFx0bWFyZ2luLWxlZnQ6IGF1dG87XFxyXFxuXFx0bWFyZ2luLXJpZ2h0OiBhdXRvOyovIH1cXG5cXG4uc291cmNlcyB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC1zaXplOiBzbWFsbDsgfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIG9wdGlvbnMgPSB7fTtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGUsIG5vLXBhcmFtLXJlYXNzaWduXG5cblxuICB1cmwgPSB1cmwgJiYgdXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybDtcblxuICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIGJ0b2EpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZjM2NWU1YTRiYzQ3M2E4ODg2ZDBiMWNiYWVjMjJlZTcuanBnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjU5ZjI4ZTk3ZTQ0NDAxZGQzMGRlNWQxNjVhNzI5YWUwLmpwZ1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkZGFlNGQ1OGJmNjVhMWM1M2UzMzM1NDQ2ZjVkYWNlYi5qcGdcIjsiLCJpbXBvcnQgJy4uL3Njc3MvaG9tZS5zY3NzJztcbmltcG9ydCAnLi4vc2Nzcy9kYXRhLnNjc3MnO1xuXG5mdW5jdGlvbiBzdGF0ZUNvZGUoc3RhdGUpe1xuICAgIC8qXG4gICAgQ29udmVydCB0aGUgdmFyaW91cyB3YXlzIHN0YXRlcyBjYW4gYmUgcmVwcmVzZW50ZWQgaW4gdGhlIGdlb2NvZGVyIHJlc3BvbnNlIHRvIGEgMiBsZXR0ZXIgc3RhdGUgY29kZS5cbiAgICAqL1xuICAgIGxldCBzdGF0ZUNvZGVVbmlmaWNhdGlvbiA9IHtcbiAgICAgICAgJ2FsJzogJ2FsJyxcbiAgICAgICAgJ2FsYWJhbWEnOiAnYWwnLFxuICAgICAgICAnYXonOiAnYXonLFxuICAgICAgICAnYXJpem9uYSc6ICdheicsXG4gICAgICAgICdhcic6ICdhcicsXG4gICAgICAgICdhcmthbnNhcyc6ICdhcicsXG4gICAgICAgICdhayc6ICdhaycsXG4gICAgICAgICdhbGFza2EnOiAnYWsnLFxuICAgICAgICAnY2EnOiAnY2EnLFxuICAgICAgICAnY2FsaWZvcm5pYSc6ICdjYScsXG4gICAgICAgICdjbyc6ICdjbycsXG4gICAgICAgICdjb2xvcmFkbyc6ICdjbycsXG4gICAgICAgICdjdCc6ICdjdCcsXG4gICAgICAgICdjb25uZWN0aWN1dCc6ICdjdCcsXG4gICAgICAgICdkZSc6ICdkZScsXG4gICAgICAgICdkZWxhd2FyZSc6ICdkZScsXG4gICAgICAgICdmbCc6ICdmbCcsXG4gICAgICAgICdmbG9yaWRhJzogJ2ZsJyxcbiAgICAgICAgJ2dhJzogJ2dhJyxcbiAgICAgICAgJ2dlb3JnaWEnOiAnZ2EnLFxuICAgICAgICAnaWQnOiAnaWQnLFxuICAgICAgICAnaWRhaG8nOiAnaWQnLFxuICAgICAgICAnaWwnOiAnaWwnLFxuICAgICAgICAnaWxsaW5vaXMnOiAnaWwnLFxuICAgICAgICAnaW4nOiAnaW4nLFxuICAgICAgICAnaW5kaWFuYSc6ICdpbicsXG4gICAgICAgICdpYSc6ICdpYScsXG4gICAgICAgICdpb3dhJzogJ2lvd2EnLFxuICAgICAgICAna3MnOiAna3MnLFxuICAgICAgICAna2Fuc2FzJzogJ2tzJyxcbiAgICAgICAgJ2t5JzogJ2t5JyxcbiAgICAgICAgJ2tlbnR1Y2t5JzogJ2t5JyxcbiAgICAgICAgJ2xhJzogJ2xhJyxcbiAgICAgICAgJ2xvdWlzaWFuYSc6ICdsYScsXG4gICAgICAgICdtZSc6ICdtZScsXG4gICAgICAgICdtYWluZSc6ICdtZScsXG4gICAgICAgICdtZCc6ICdtZCcsXG4gICAgICAgICdtYXJ5bGFuZCc6ICdtZCcsXG4gICAgICAgICdtYSc6ICdtYScsXG4gICAgICAgICdtYXNzYWNodXNldHRzJzogJ21hJyxcbiAgICAgICAgJ21pJzogJ21pJyxcbiAgICAgICAgJ21pY2hpZ2FuJzogJ21pJyxcbiAgICAgICAgJ21uJzogJ21uJyxcbiAgICAgICAgJ21pbm5lc290YSc6ICdtbicsXG4gICAgICAgICdtcyc6ICdtcycsXG4gICAgICAgICdtaXNzaXNzaXBwaSc6ICdtcycsXG4gICAgICAgICdtbyc6ICdtbycsXG4gICAgICAgICdtaXNzb3VyaSc6ICdtbycsXG4gICAgICAgICdtdCc6ICdtdCcsXG4gICAgICAgICdtb250YW5hJzogJ210JyxcbiAgICAgICAgJ25lJzogJ25lJyxcbiAgICAgICAgJ25lYnJhc2thJzogJ25lJyxcbiAgICAgICAgJ252JzogJ252JyxcbiAgICAgICAgJ25ldmFkYSc6ICdudicsXG4gICAgICAgICduaCc6ICduaCcsXG4gICAgICAgICduZXcgaGFtcHNoaXJlJzogJ25oJyxcbiAgICAgICAgJ2hhd2FpaSc6ICdoaScsXG4gICAgICAgICdoaSc6ICdoaScsXG4gICAgICAgICduaic6ICduaicsXG4gICAgICAgICduZXcgamVyc2V5JzogJ25qJyxcbiAgICAgICAgJ25tJzogJ25tJyxcbiAgICAgICAgJ25ldyBtZXhpY28nOiAnbm0nLFxuICAgICAgICAnbnknOiAnbnknLFxuICAgICAgICAnbmV3IHlvcmsnOiAnbnknLFxuICAgICAgICAnbmMnOiAnbmMnLFxuICAgICAgICAnbm9ydGggY2Fyb2xpbmEnOiAnbmMnLFxuICAgICAgICAnbmQnOiAnbmQnLFxuICAgICAgICAnbm9ydGggZGFrb3RhJzogJ25kJyxcbiAgICAgICAgJ29oJzogJ29oJyxcbiAgICAgICAgJ29oaW8nOiAnb2gnLFxuICAgICAgICAnb2snOiAnb2snLFxuICAgICAgICAnb2tsYWhvbWEnOiAnb2snLFxuICAgICAgICAnb3InOiAnb3InLFxuICAgICAgICAnb3JlZ29uJzogJ29yJyxcbiAgICAgICAgJ3BhJzogJ3BhJyxcbiAgICAgICAgJ3Blbm5zeWx2YW5pYSc6ICdwYScsXG4gICAgICAgICdyaSc6ICdyaScsXG4gICAgICAgICdyaG9kZSBpc2xhbmQnOiAncmknLFxuICAgICAgICAnc2MnOiAnc2MnLFxuICAgICAgICAnc291dGggY2Fyb2xpbmEnOiAnc2MnLFxuICAgICAgICAnc2QnOiAnc2QnLFxuICAgICAgICAnc291dGggZGFrb3RhJzogJ3NkJyxcbiAgICAgICAgJ3Rlbm5lc3NlZSc6ICd0bicsXG4gICAgICAgICd0bic6ICd0bicsXG4gICAgICAgICd0ZXhhcyc6ICd0eCcsXG4gICAgICAgICd0eCc6ICd0eCcsXG4gICAgICAgICd1dGFoJzogJ3V0JyxcbiAgICAgICAgJ3V0JzogJ3V0JyxcbiAgICAgICAgJ3Zlcm1vbnQnOiAndnQnLFxuICAgICAgICAndnQnOiAndnQnLFxuICAgICAgICAndmlyZ2luaWEnOiAndmEnLFxuICAgICAgICAndmEnOiAndmEnLFxuICAgICAgICAnd2FzaGluZ3Rvbic6ICd3YScsXG4gICAgICAgICd3YSc6ICd3YScsXG4gICAgICAgICd3ZXN0IHZpcmdpbmlhJzogJ3d2JyxcbiAgICAgICAgJ3d2JzogJ3d2JyxcbiAgICAgICAgJ3dpc2NvbnNpbic6ICd3aScsXG4gICAgICAgICd3aSc6ICd3aScsXG4gICAgICAgICd3eW9taW5nJzogJ3d5JyxcbiAgICAgICAgJ3d5JzogJ3d5J1xuICAgIH07XG4gICAgcmV0dXJuIHN0YXRlQ29kZVVuaWZpY2F0aW9uW3N0YXRlLnRvTG93ZXJDYXNlKCldO1xufVxuXG5mdW5jdGlvbiBzdGF0ZU5hbWUoc3RhdGUpe1xuICAgIC8qXG4gICAgQ29udmVydCB0aGUgdmFyaW91cyB3YXlzIHN0YXRlcyBjYW4gYmUgcmVwcmVzZW50ZWQgaW4gdGhlIGdlb2NvZGVyIHJlc3BvbnNlIHRvIGEgMiBsZXR0ZXIgc3RhdGUgY29kZS5cbiAgICAqL1xuICAgIGxldCBzdGF0ZUNvZGVVbmlmaWNhdGlvbiA9IHtcbiAgICAgICAgJ2FsJzogJ0FsYWJhbWEnLFxuICAgICAgICAnYXonOiAnQXJpem9uYScsXG4gICAgICAgICdhcic6ICdBcmthbnNhcycsXG4gICAgICAgICdhayc6ICdBbGFza2EnLFxuICAgICAgICAnY2EnOiAnQ2FsaWZvcm5pYScsXG4gICAgICAgICdjbyc6ICdDb2xvcmFkbycsXG4gICAgICAgICdjdCc6ICdDb25uZWN0aWN1dCcsXG4gICAgICAgICdkZSc6ICdEZWxhd2FyZScsXG4gICAgICAgICdmbG9yaWRhJzogJ0Zsb3JpZGEnLFxuICAgICAgICAnZ2EnOiAnR2VvcmdpYScsXG4gICAgICAgICdoaSc6ICdIYXdhaWknLFxuICAgICAgICAnaWQnOiAnSWRhaG8nLFxuICAgICAgICAnaWwnOiAnSWxsaW5vaXMnLFxuICAgICAgICAnaW4nOiAnSW5kaWFuYScsXG4gICAgICAgICdpYSc6ICdJb3dhJyxcbiAgICAgICAgJ2tzJzogJ0thbnNhcycsXG4gICAgICAgICdreSc6ICdLZW50dWNreScsXG4gICAgICAgICdsYSc6ICdMb3Vpc2lhbmEnLFxuICAgICAgICAnbWUnOiAnTWFpbmUnLFxuICAgICAgICAnbWQnOiAnTWFyeWxhbmQnLFxuICAgICAgICAnbWEnOiAnTWFzc2FjaHVzZXR0cycsXG4gICAgICAgICdtaSc6ICdNaWNoaWdhbicsXG4gICAgICAgICdtbic6ICdNaW5uZXNvdGEnLFxuICAgICAgICAnbXMnOiAnTWlzc2lzc2lwcGknLFxuICAgICAgICAnbW8nOiAnTWlzc291cmknLFxuICAgICAgICAnbXQnOiAnTW9udGFuYScsXG4gICAgICAgICduZSc6ICdOZWJyYXNrYScsXG4gICAgICAgICdudic6ICdOZXZhZGEnLFxuICAgICAgICAnbmgnOiAnTmV3IEhhbXBzaGlyZScsXG4gICAgICAgICduaic6ICdOZXcgSmVyc2V5JyxcbiAgICAgICAgJ25tJzogJ05ldyBNZXhpY28nLFxuICAgICAgICAnbnknOiAnTmV3IFlvcmsnLFxuICAgICAgICAnbmMnOiAnTm9ydGggQ2Fyb2xpbmEnLFxuICAgICAgICAnbmQnOiAnTm9ydGggRGFrb3RhJyxcbiAgICAgICAgJ29oJzogJ09oaW8nLFxuICAgICAgICAnb2snOiAnT2tsYWhvbWEnLFxuICAgICAgICAnb3InOiAnT3JlZ29uJyxcbiAgICAgICAgJ3BhJzogJ1Blbm5zeWx2YW5pYScsXG4gICAgICAgICdyaSc6ICdSaG9kZSBJc2xhbmQnLFxuICAgICAgICAnc2MnOiAnU291dGggQ2Fyb2xpbmEnLFxuICAgICAgICAnc2QnOiAnU291dGggRGFrb3RhJyxcbiAgICAgICAgJ3RuJzogJ1Rlbm5lc3NlZScsXG4gICAgICAgICd0eCc6ICdUZXhhcycsXG4gICAgICAgICd1dCc6ICdVdGFoJyxcbiAgICAgICAgJ3Z0JzogJ1Zlcm1vbnQnLFxuICAgICAgICAndmEnOiAnVmlyZ2luaWEnLFxuICAgICAgICAnd2EnOiAnV2FzaGluZ3RvbicsXG4gICAgICAgICd3dic6ICdXZXN0IFZpcmdpbmlhJyxcbiAgICAgICAgJ3dpJzogJ1dpc2NvbnNpbicsXG4gICAgICAgICd3eSc6ICdXeW9taW5nJ1xuICAgIH07XG4gICAgcmV0dXJuIHN0YXRlQ29kZVVuaWZpY2F0aW9uW3N0YXRlXTtcbn1cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICBjb25zdCBNQVBBUElLRVkgPSAnQUl6YVN5QnBYbTdaX1JyOTlLaTNfaUI0dkhwWmxQQmljWHFydklrJztcbiAgICAvLyBDcmVhdGUgdGhlIHNjcmlwdCB0YWcsIHNldCB0aGUgYXBwcm9wcmlhdGUgYXR0cmlidXRlc1xuICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHQuc3JjID0gYGh0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qcz9rZXk9JHtNQVBBUElLRVl9JmNhbGxiYWNrPWluaXRNYXBgO1xuICAgIHNjcmlwdC5kZWZlciA9IHRydWU7XG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuICAgIC8vIEF0dGFjaCB5b3VyIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHRoZSBgd2luZG93YCBvYmplY3RcblxuICAgIHdpbmRvdy5pbml0TWFwID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gSlMgQVBJIGlzIGxvYWRlZCBhbmQgYXZhaWxhYmxlXG4gICAgICAgIGxldCBteUxhdGxuZyA9IHsgbGF0OiAzOS41MCwgbG5nOiAtOTguMzUgfVxuXG4gICAgICAgIGxldCBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFwXCIpLCB7XG4gICAgICAgICAgICBjZW50ZXI6IG15TGF0bG5nLFxuICAgICAgICAgICAgem9vbTogM1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDcmVhdGUgdGhlIGluaXRpYWwgSW5mb1dpbmRvdyB0ZWxsaW5nIHVzZXIgdG8gY2xpY2sgdGhlIG1hcCBhdCB0aGUgbG9jYXRpb24gdGhleSB3YW50XG4gICAgICAgIHZhciBpbmZvV2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coXG4gICAgICAgIHtjb250ZW50OiAnQ2xpY2sgb24geW91ciBzdGF0ZSB0byBnZXQgc3RhdGUgaW5mbyEnLCBwb3NpdGlvbjogbXlMYXRsbmd9KTtcbiAgICAgICAgaW5mb1dpbmRvdy5vcGVuKG1hcCk7XG5cbiAgICAgICAgLyogU2V0IHVwIGdlb2NvZGVyICovXG4gICAgICAgIHZhciBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcjtcblxuICAgICAgICAvLyBTZXQgdXAgY2hhcnQuanNcbiAgICAgICAgbGV0IGNoYXJ0anMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgY2hhcnRqcy5zcmMgPSAnaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9jaGFydC5qc0AyLjguMCc7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoY2hhcnRqcyk7XG5cbiAgICAgICAgLy8gQ29uZmlndXJlIHRoZSBjbGljayBsaXN0ZW5lci5cbiAgICAgICAgbWFwLmFkZExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKG1hcHNNb3VzZUV2ZW50KSB7XG4gICAgICAgICAgICAvLyBDbG9zZSB0aGUgY3VycmVudCBJbmZvV2luZG93LlxuICAgICAgICAgICAgaW5mb1dpbmRvdy5jbG9zZSgpO1xuICAgICAgICBcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBJbmZvV2luZG93LlxuICAgICAgICAgICAgaW5mb1dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHtwb3NpdGlvbjogbWFwc01vdXNlRXZlbnQubGF0TG5nfSk7XG4gICAgICAgICAgICBnZW9jb2RlTGF0TG5nKG1hcCwgbWFwc01vdXNlRXZlbnQubGF0TG5nLCBnZW9jb2RlciwgKHJlc3VsdCk9PntcbiAgICAgICAgICAgICAgICBnZXREYXRhKHN0YXRlQ29kZShyZXN1bHQpKTtcbiAgICAgICAgICAgIH0pOyBcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qIEhhbmRsZSBpbnZhbGlkIG1hcCBsb2NhdGlvbnMgKi9cbiAgICBmdW5jdGlvbiBpbnZhbGlkTG9jYXRpb24oKXtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhdGEtYm94JykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGxldCBvbGRDaGFydCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5lLWNoYXJ0Jyk7XG4gICAgICAgIGlmKG9sZENoYXJ0KXtcbiAgICAgICAgICAgIG9sZENoYXJ0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2xkQ2hhcnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGludmFsaWRTdGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gICAgICAgIGludmFsaWRTdGF0ZS5pbm5lclRleHQgPSBcIlRoZSBwbGFjZSB5b3UgY2hvc2UgaXMgbm90IGEgdmFsaWQgc3RhdGUuIFBsZWFzZSBzZWxlY3QgYSB2YWxpZCBVUyBzdGF0ZSB0byBkaXNwbGF5IGRhdGEuXCJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhdGEtYm94JykuYXBwZW5kQ2hpbGQoaW52YWxpZFN0YXRlKTtcblxuICAgIH1cblxuICAgIC8qIENvdmVydCBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIHRvIGEgc3RhdGUgKi9cbiAgICBmdW5jdGlvbiBnZW9jb2RlTGF0TG5nKG1hcCwgbGF0TG9uZywgZ2VvY29kZXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeydsb2NhdGlvbic6IGxhdExvbmd9LCBmdW5jdGlvbihyZXN1bHQsIHN0YXR1cykge1xuICAgICAgICAgICAgLyogRG9lcyBzdHVmZiBpZiB0aGUgZ2VvY29kZSBpcyB2YWxpZCAqL1xuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ09LJykge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VNYXJrZXIobGF0TG9uZywgbWFwKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFkZHJlc3MgPSByZXN1bHRbMF1bJ2Zvcm1hdHRlZF9hZGRyZXNzJ107XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGRyZXNzLnNsaWNlKGFkZHJlc3MubGVuZ3RoLTMsIGFkZHJlc3MubGVuZ3RoKSA9PSAnVVNBJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3BsaXRBZGRyZXNzID0gYWRkcmVzcy5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXRlID0gc3BsaXRBZGRyZXNzWyBzcGxpdEFkZHJlc3MubGVuZ3RoIC0gMl0uc3BsaXQoJyAnKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkTG9jYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRMb2NhdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW52YWxpZExvY2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qIFB1dHMgYW5kIHVwZGF0ZXMgdGhlIHJlZCBwbGFjZSBtYXJrZXIgb24gdGhlIG1hcCAqL1xuICAgIGxldCBtYXJrZXI7XG4gICAgZnVuY3Rpb24gcGxhY2VNYXJrZXIobGF0bG5nLCBtYXApe1xuICAgICAgICBpZiAobWFya2VyKXtcbiAgICAgICAgICAgIG1hcmtlci5zZXRQb3NpdGlvbihsYXRsbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGxhdGxuZyxcbiAgICAgICAgICAgICAgICBtYXA6IG1hcFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vXG4gICAgLy9cbiAgICAvLyBHZXQgRGF0YVxuICAgIC8vXG4gICAgLy9cbiAgICBsZXQgZ3JhcGg7XG5cbiAgICBmdW5jdGlvbiBnZXREYXRhKHN0YXRlKXtcbiAgICAgICAgbGV0IHVybCA9IGAvZ2V0U3RhdGU/c3RhdGU9JHtzdGF0ZX0maGlzdG9yaWM9dHJ1ZWA7XG4gICAgICAgIGZldGNoKHVybClcbiAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHJlc3VsdC5qc29uKCkpXG4gICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICBwdXREYXRhSW5Eb2N1bWVudChyZXNbMF0pO1xuICAgICAgICAgICAgZ3JhcGggPSBtYWtlR3JhcGgocmVzLCBncmFwaCk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkRGF0YShuYW1lLCBzdGF0KXtcbiAgICAgICAgbGV0IHN0YXRzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gICAgICAgIGlmIChzdGF0ID09PSBudWxsKSB7XG4gICAgICAgICAgICBzdGF0ID0gJ1VucmVjb3JkZWQnO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRzRWxlbWVudC5pbm5lclRleHQgPSBuYW1lICsgc3RhdDtcbiAgICAgICAgcmV0dXJuIHN0YXRzRWxlbWVudFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHB1dERhdGFJbkRvY3VtZW50KGRhdGEpe1xuICAgICAgICBsZXQgZGF0YUFyZWEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGF0YS1ib3gnKTtcbiAgICAgICAgZGF0YUFyZWEuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGxldCBzdGF0ZVRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcbiAgICAgICAgc3RhdGVUaXRsZS5pbm5lclRleHQgPSAnRGF0YSBmb3IgJyArIHN0YXRlTmFtZShkYXRhWydzdGF0ZSddLnRvTG93ZXJDYXNlKCkpKyc6JztcbiAgICAgICAgZGF0YUFyZWEuYXBwZW5kQ2hpbGQoc3RhdGVUaXRsZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBOZXcgQ292aWQgQ2FzZXMgVG9kYXlcbiAgICAgICAgZGF0YUFyZWEuYXBwZW5kQ2hpbGQoYWRkRGF0YSgnTmV3IENhc2VzIFRvZGF5OiAnLGRhdGFbJ3Bvc2l0aXZlSW5jcmVhc2UnXSkpO1xuXG4gICAgICAgIC8vIFRvdGFsIERlYXRocyBUb2RheVxuICAgICAgICBkYXRhQXJlYS5hcHBlbmRDaGlsZChhZGREYXRhKCdUb3RhbCBEZWF0aHMgVG9kYXk6ICcsZGF0YVsnZGVhdGhJbmNyZWFzZSddKSk7XG5cbiAgICAgICAgLy8gQ3VtdWxhdGl2ZSBEZWF0aHNcbiAgICAgICAgZGF0YUFyZWEuYXBwZW5kQ2hpbGQoYWRkRGF0YSgnQ3VtdWxhdGl2ZSBkZWF0aHM6ICcsZGF0YVsnZGVhdGgnXSkpO1xuXG4gICAgICAgIC8vIEN1cnJlbnRseSBIb3NwaXRhbGl6ZWRcbiAgICAgICAgZGF0YUFyZWEuYXBwZW5kQ2hpbGQoYWRkRGF0YSgnUGF0aWVudHMgQ3VycmVudGx5IEhvc3BpdGFsaXplZDogJyxkYXRhWydob3NwaXRhbGl6ZWRDdXJyZW50bHknXSkpO1xuXG4gICAgICAgIC8vIENPVklEIHBhdGllbnRzIGluIElDVVxuICAgICAgICBkYXRhQXJlYS5hcHBlbmRDaGlsZChhZGREYXRhKCdQYXRpZW50IGN1cnJlbnRseSBpbiBJQ1U6ICcsZGF0YVsnaW5JY3VDdXJyZW50bHknXSkpO1xuICAgIH07XG5cbiAgICBcbiAgICBmdW5jdGlvbiBtYWtlR3JhcGgoZGF0YUFycmF5LCBvbGRHcmFwaCl7XG4gICAgICAgIGxldCBkYXlzID0gW107XG4gICAgICAgIGxldCBwb3NpdGl2ZSA9IFtdO1xuICAgICAgICBsZXQgZGVhdGggPSBbXTtcbiAgICAgICAgZm9yIChsZXQgZGF5IG9mIGRhdGFBcnJheSl7XG4gICAgICAgICAgICBkYXlzLnB1c2goZGF5WydkYXRlJ10pO1xuICAgICAgICAgICAgZGVhdGgucHVzaChkYXlbJ2RlYXRoJ10pO1xuICAgICAgICAgICAgcG9zaXRpdmUucHVzaChkYXlbJ3Bvc2l0aXZlJ10pO1xuICAgICAgICB9XG4gICAgICAgIGRheXMucmV2ZXJzZSgpXG4gICAgICAgIGRlYXRoLnJldmVyc2UoKVxuICAgICAgICBwb3NpdGl2ZS5yZXZlcnNlKCk7XG4gICAgICAgIC8vIERlc3Ryb3kgdGhlIG9sZCBjYW52YXMvY2hhcnQgYW5kIGNyZWF0ZSBhIG5ldyBvbmUuXG4gICAgICAgIGxldCBvbGRDaGFydCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5lLWNoYXJ0Jyk7XG4gICAgICAgIGlmKG9sZENoYXJ0KXtcbiAgICAgICAgICAgIG9sZENoYXJ0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2xkQ2hhcnQpO1xuICAgICAgICB9XG4gICAgICAgIFxuXG4gICAgICAgIGxldCBuZXdDaGFydCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICBuZXdDaGFydC53aWR0aCA9IFwiODAwXCI7XG4gICAgICAgIG5ld0NoYXJ0LmhlaWdodCA9IFwiNDUwXCI7XG4gICAgICAgIG5ld0NoYXJ0LmlkID0gXCJsaW5lLWNoYXJ0XCI7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xpbmUtY2hhcnQtZGl2JykuYXBwZW5kQ2hpbGQobmV3Q2hhcnQpO1xuICAgICAgICBcblxuICAgICAgICBncmFwaCA9IG5ldyBDaGFydChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluZS1jaGFydCcpLCB7XG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIGxhYmVsczogZGF5cyxcbiAgICAgICAgICAgICAgZGF0YXNldHM6IFt7IFxuICAgICAgICAgICAgICAgICAgZGF0YTogcG9zaXRpdmUsXG4gICAgICAgICAgICAgICAgICBsYWJlbDogXCJUb3RhbCBDYXNlc1wiLFxuICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwiIzNlOTVjZFwiLFxuICAgICAgICAgICAgICAgICAgZmlsbDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LCB7IFxuICAgICAgICAgICAgICAgICAgZGF0YTogZGVhdGgsXG4gICAgICAgICAgICAgICAgICBsYWJlbDogXCJUb3RhbCBEZWF0aHNcIixcbiAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBcIiM4ZTVlYTJcIixcbiAgICAgICAgICAgICAgICAgIGZpbGw6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgdGV4dDogJ0NvdmlkIERhdGEgZm9yICcgKyBzdGF0ZU5hbWUoZGF0YUFycmF5WzBdWydzdGF0ZSddLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8vIEFwcGVuZCB0aGUgJ3NjcmlwdCcgZWxlbWVudCB0byAnaGVhZCdcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59KVxuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTQtMiEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9kYXRhLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTIhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaG9tZS5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiXSwic291cmNlUm9vdCI6IiJ9
