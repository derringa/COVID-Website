/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js!./src/scss/data.scss":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src??ref--4-2!./node_modules/sass-loader/dist/cjs.js!./src/scss/data.scss ***!
  \*****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#map {\n  width: 100%;\n  height: 60vh; }\n  #map img {\n    border: none;\n    min-width: 0; }\n\n#map-box {\n  width: 100%;\n  overflow: auto;\n  background-color: #fdcb73;\n  padding: 2% 5%;\n  margin: 5% auto;\n  border-radius: 5px; }\n  #map-box img {\n    width: 50%; }\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js!./src/scss/home.scss":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src??ref--4-2!./node_modules/sass-loader/dist/cjs.js!./src/scss/home.scss ***!
  \*****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
var ___CSS_LOADER_GET_URL_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
var ___CSS_LOADER_URL_IMPORT_0___ = __webpack_require__(/*! ../img/nasa-unsplash.jpg */ "./src/img/nasa-unsplash.jpg");
var ___CSS_LOADER_URL_IMPORT_1___ = __webpack_require__(/*! ../img/markus-spiske-unsplash.jpg */ "./src/img/markus-spiske-unsplash.jpg");
var ___CSS_LOADER_URL_IMPORT_2___ = __webpack_require__(/*! ../img/jack-hamilton-unsplash.jpg */ "./src/img/jack-hamilton-unsplash.jpg");
exports = ___CSS_LOADER_API_IMPORT___(false);
var ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_2___);
// Module
exports.push([module.i, "body {\n  background-color: white;\n  margin: 0px;\n  font-family: \"Times New Roman\", Times, serif;\n  font-size: 1rem;\n  font-weight: 400;\n  width: 100%; }\n\na {\n  text-decoration: none; }\n\n.header {\n  width: 100%;\n  min-height: 70px;\n  padding-top: 3%;\n  background: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") no-repeat center center fixed;\n  background-size: cover;\n  color: #ffffff; }\n\nnav {\n  float: center;\n  background-color: #011f4b;\n  width: 100%;\n  margin-top: 5%;\n  padding: 2px 0%;\n  /*.gunrockPic::after {\r\n        content: \"\";\r\n        display: inline-block;\r\n        position: relative;\r\n        background-image: url(../img/gunrockNav.jpg);\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        width: 4rem;\r\n        height: 4rem;\r\n    } */ }\n\n.navbar {\n  margin-left: 10.3%;\n  margin-top: 1%;\n  width: 75%;\n  display: flex;\n  justify-content: space-around; }\n  .navbar li {\n    display: inline-block; }\n    .navbar li a {\n      text-decoration: none;\n      color: rgba(255, 255, 255, 0.8);\n      font-weight: normal; }\n      .navbar li a:hover {\n        color: #ffffff; }\n\n.title-box {\n  background-color: rgba(46, 45, 45, 0.6);\n  text-align: center;\n  width: 40%;\n  padding: 3%;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 3px; }\n\n#background-thing {\n  width: 100%;\n  min-height: 600px;\n  padding-top: 3%;\n  background: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") no-repeat top center fixed;\n  background-size: cover; }\n\n.container {\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: white;\n  color: black; }\n  .container ul {\n    width: 15%;\n    margin-left: auto;\n    margin-right: auto; }\n\n#crowd {\n  display: inline-block;\n  margin-left: 20px;\n  width: 100%;\n  min-width: 90px;\n  margin: 0 auto;\n  padding: 2%; }\n\n#pacman {\n  display: inline-block;\n  margin-left: 20px;\n  width: 80%;\n  min-width: 90px;\n  margin: 0 auto;\n  padding: 2%; }\n\n.flex-center {\n  display: flex;\n  justify-content: center; }\n  .flex-center div {\n    padding: 15px;\n    width: 50%;\n    margin: 5px; }\n\n.container-but-yellow {\n  min-height: 400 px;\n  width: 100%;\n  background-color: #fdbe51; }\n\n#resources p {\n  text-align: center; }\n\n#resources #resource-buttons {\n  padding-top: 20px;\n  text-align: center;\n  display: flex;\n  justify-content: space-around; }\n  #resources #resource-buttons a {\n    display: inline-block; }\n\n#resources .btn-primary {\n  background-color: #011f4b;\n  border-color: #001b43;\n  color: rgba(255, 255, 255, 0.8);\n  width: 200px; }\n  #resources .btn-primary:hover {\n    background-color: #b3cde0;\n    color: #03396c; }\n\n#resources .dropdown {\n  margin-left: auto;\n  margin-right: auto; }\n  #resources .dropdown .btn-primary:not(:disabled):not(.disabled).active, #resources .dropdown .btn-primary:not(:disabled):not(.disabled):active, #resources .dropdown .show > .btn-primary.dropdown-toggle {\n    background-color: #b3cde0;\n    color: #001b43; }\n  #resources .dropdown .btn-primary:hover {\n    background-color: #b3cde0;\n    color: #001b43; }\n  #resources .dropdown .dropdown-menu {\n    color: #001b43;\n    height: 200px;\n    overflow-y: auto;\n    width: 75%; }\n    #resources .dropdown .dropdown-menu a {\n      color: #001b43;\n      margin-left: 2%; }\n\n.textContainer {\n  width: 90%;\n  margin-left: auto;\n  margin-right: auto;\n  text-align: center;\n  padding: 2%; }\n  .textContainer a {\n    text-decoration: none; }\n  .textContainer p {\n    text-align: justify; }\n\nform {\n  width: 90%;\n  overflow: auto;\n  background-color: #fdcb73;\n  padding: 2% 5%;\n  margin: 5% auto;\n  border-radius: 5px; }\n  form ol {\n    width: 90%;\n    padding: 2%;\n    margin-left: auto;\n    margin-right: auto;\n    text-align: left; }\n  form li {\n    padding: 2%; }\n  form img {\n    display: inline-block;\n    vertical-align: middle;\n    width: 70%;\n    min-width: 90px;\n    margin: 0 auto;\n    padding: 2%; }\n\nselect {\n  margin-left: 25%;\n  width: 45%; }\n\ninput[type=submit] {\n  padding: 12px 20px;\n  border-style: solid;\n  border-color: #001b43;\n  background-color: #011f4b;\n  color: rgba(255, 255, 255, 0.8);\n  border-radius: 4px;\n  cursor: pointer;\n  margin-right: auto;\n  margin-left: auto; }\n  input[type=submit]:hover {\n    background-color: rgba(255, 255, 255, 0.8);\n    border-color: #03396c;\n    color: #03396c; }\n\ninput[type=text] {\n  width: 45%;\n  margin-left: 25%; }\n\nfooter {\n  width: 100%;\n  background: url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ") no-repeat center center fixed;\n  background-size: cover;\n  color: #ffffff;\n  bottom: 0;\n  padding: 1%;\n  /*color: #ffffff;\r\n\tmargin-left: auto;\r\n\tmargin-right: auto;*/ }\n\n.sources {\n  list-style: none;\n  color: white;\n  font-size: small; }\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    // eslint-disable-next-line no-param-reassign
    options = {};
  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign


  url = url && url.__esModule ? url.default : url;

  if (typeof url !== 'string') {
    return url;
  } // If url is already wrapped in quotes, remove them


  if (/^['"].*['"]$/.test(url)) {
    // eslint-disable-next-line no-param-reassign
    url = url.slice(1, -1);
  }

  if (options.hash) {
    // eslint-disable-next-line no-param-reassign
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, '\\n'), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : undefined;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && btoa) {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./src/img/jack-hamilton-unsplash.jpg":
/*!********************************************!*\
  !*** ./src/img/jack-hamilton-unsplash.jpg ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "f365e5a4bc473a8886d0b1cbaec22ee7.jpg");

/***/ }),

/***/ "./src/img/markus-spiske-unsplash.jpg":
/*!********************************************!*\
  !*** ./src/img/markus-spiske-unsplash.jpg ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "59f28e97e44401dd30de5d165a729ae0.jpg");

/***/ }),

/***/ "./src/img/nasa-unsplash.jpg":
/*!***********************************!*\
  !*** ./src/img/nasa-unsplash.jpg ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (__webpack_require__.p + "ddae4d58bf65a1c53e3335446f5daceb.jpg");

/***/ }),

/***/ "./src/js/data.js":
/*!************************!*\
  !*** ./src/js/data.js ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _scss_home_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/home.scss */ "./src/scss/home.scss");
/* harmony import */ var _scss_home_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_scss_home_scss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _scss_data_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scss/data.scss */ "./src/scss/data.scss");
/* harmony import */ var _scss_data_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_scss_data_scss__WEBPACK_IMPORTED_MODULE_1__);



function stateCode(state){
    /*
    Convert the various ways states can be represented in the geocoder response to a 2 letter state code.
    */
    let stateCodeUnification = {
        'al': 'al',
        'alabama': 'al',
        'az': 'az',
        'arizona': 'az',
        'ar': 'ar',
        'arkansas': 'ar',
        'ca': 'ca',
        'california': 'ca',
        'co': 'co',
        'colorado': 'co',
        'ct': 'ct',
        'connecticut': 'ct',
        'de': 'de',
        'delaware': 'de',
        'fl': 'fl',
        'florida': 'fl',
        'ga': 'ga',
        'georgia': 'ga',
        'id': 'id',
        'idaho': 'id',
        'il': 'il',
        'illinois': 'il',
        'in': 'in',
        'indiana': 'in',
        'ia': 'ia',
        'iowa': 'iowa',
        'ks': 'ks',
        'kansas': 'ks',
        'ky': 'ky',
        'kentucky': 'ky',
        'la': 'la',
        'louisiana': 'la',
        'me': 'me',
        'maine': 'me',
        'md': 'md',
        'maryland': 'md',
        'ma': 'ma',
        'massachusetts': 'ma',
        'mi': 'mi',
        'michigan': 'mi',
        'mn': 'mn',
        'minnesota': 'mn',
        'ms': 'ms',
        'mississippi': 'ms',
        'mo': 'mo',
        'missouri': 'mo',
        'mt': 'mt',
        'montana': 'mt',
        'ne': 'ne',
        'nebraska': 'ne',
        'nv': 'nv',
        'nevada': 'nv',
        'nh': 'nh',
        'new hampshire': 'nh',
        'nj': 'nj',
        'new jersey': 'nj',
        'nm': 'nm',
        'new mexico': 'nm',
        'ny': 'ny',
        'new york': 'ny',
        'nc': 'nc',
        'north carolina': 'nc',
        'nd': 'nd',
        'north dakota': 'nd',
        'oh': 'oh',
        'ohio': 'oh',
        'ok': 'ok',
        'oklahoma': 'ok',
        'or': 'or',
        'oregon': 'or',
        'pa': 'pa',
        'pennsylvania': 'pa',
        'ri': 'ri',
        'rhode island': 'ri',
        'sc': 'sc',
        'south carolina': 'sc',
        'sd': 'sd',
        'south dakota': 'sd',
        'tennessee': 'tn',
        'tn': 'tn',
        'texas': 'tx',
        'tx': 'tx',
        'utah': 'ut',
        'ut': 'ut',
        'vermont': 'vt',
        'vt': 'vt',
        'virginia': 'va',
        'va': 'va',
        'washington': 'wa',
        'wa': 'wa',
        'west virginia': 'wv',
        'wv': 'wv',
        'wisconsin': 'wi',
        'wi': 'wi',
        'wyoming': 'wy',
        'wy': 'wy'
    };
    return stateCodeUnification[state.toLowerCase()];
}

function stateName(state){
    /*
    Convert the various ways states can be represented in the geocoder response to a 2 letter state code.
    */
    let stateCodeUnification = {
        'al': 'Alabama',
        'az': 'Arizona',
        'ar': 'Arkansas',
        'ca': 'California',
        'co': 'Colorado',
        'ct': 'Connecticut',
        'de': 'Delaware',
        'florida': 'Florida',
        'ga': 'Georgia',
        'id': 'Idaho',
        'il': 'Illinois',
        'in': 'Indiana',
        'ia': 'Iowa',
        'ks': 'Kansas',
        'ky': 'Kentucky',
        'la': 'Louisiana',
        'me': 'Maine',
        'md': 'Maryland',
        'ma': 'Massachusetts',
        'mi': 'Michigan',
        'mn': 'Minnesota',
        'ms': 'Mississippi',
        'mo': 'Missouri',
        'mt': 'Montana',
        'ne': 'Nebraska',
        'nv': 'Nevada',
        'nh': 'New Hampshire',
        'nj': 'New Jersey',
        'nm': 'New Mexico',
        'ny': 'New York',
        'nc': 'North Carolina',
        'nd': 'North Dakota',
        'oh': 'Ohio',
        'ok': 'Oklahoma',
        'or': 'Oregon',
        'pa': 'Pennsylvania',
        'ri': 'Rhode Island',
        'sc': 'South Carolina',
        'sd': 'South Dakota',
        'tn': 'Tennessee',
        'tx': 'Texas',
        'ut': 'Utah',
        'vt': 'Vermont',
        'va': 'Virginia',
        'wa': 'Washington',
        'wv': 'West Virginia',
        'wi': 'Wisconsin',
        'wy': 'Wyoming'
    };
    return stateCodeUnification[state];
}

document.addEventListener('DOMContentLoaded', () => {
    const MAPAPIKEY = 'AIzaSyBpXm7Z_Rr99Ki3_iB4vHpZlPBicXqrvIk';
    // Create the script tag, set the appropriate attributes
    var script = document.createElement('script');
    script.src = `https://maps.googleapis.com/maps/api/js?key=${MAPAPIKEY}&callback=initMap`;
    script.defer = true;
    script.async = true;

    // Attach your callback function to the `window` object

    window.initMap = function() {
    // JS API is loaded and available
        let myLatlng = { lat: 39.50, lng: -98.35 }

        let map = new google.maps.Map(document.getElementById("map"), {
            center: myLatlng,
            zoom: 3,
            draggable: false
        });

        // Create the initial InfoWindow telling user to click the map at the location they want
        var infoWindow = new google.maps.InfoWindow(
        {content: 'Click on your state to get state info!', position: myLatlng});
        infoWindow.open(map);

        /* Set up geocoder */
        var geocoder = new google.maps.Geocoder;

        // Set up chart.js
        let chartjs = document.createElement('script');
        chartjs.src = 'https://cdn.jsdelivr.net/npm/chart.js@2.8.0';
        document.getElementsByTagName('head')[0].appendChild(chartjs);

        // Configure the click listener.
        map.addListener('click', function(mapsMouseEvent) {
            // Close the current InfoWindow.
            infoWindow.close();
        
            // Create a new InfoWindow.
            infoWindow = new google.maps.InfoWindow({position: mapsMouseEvent.latLng});
            geocodeLatLng(map, mapsMouseEvent.latLng, geocoder, (result)=>{
                getData(stateCode(result));
            }); 
        });
    };

    /* Covert latitude and longitude to a state */
    function geocodeLatLng(map, latLong, geocoder, callback) {
        geocoder.geocode({'location': latLong}, function(result, status) {
            /* Does stuff if the geocode is valid */
            if (status === 'OK') {
                if (result[0]) {
                    placeMarker(latLong, map);
                    let addressInParts = result[0]['formatted_address'].split(',');
                    let state = addressInParts[ addressInParts.length - 2].split(' ')[1];
                    callback(state);
                } else {
                    window.alert('No results found');
                }
            } else {
                window.alert('Geocoder failed due to: ' + status);
            }
        });
    }

    /* Puts and updates the red place marker on the map */
    let marker;
    function placeMarker(latlng, map){
        if (marker){
            marker.setPosition(latlng);
        } else {
            marker = new google.maps.Marker({
                position: latlng,
                map: map
            });
        }
    }


    //
    //
    // Get Data
    //
    //
    let graph;

    function getData(state){
        let url = `/getState?state=${state}&historic=true`;
        fetch(url)
        .then(result => result.json())
        .then(res => {
            putDataInDocument(res[0]);
            graph = makeGraph(res, graph);
        })
    }

    function addData(name, stat){
        let statsElement = document.createElement('h3');
        if (stat === null) {
            stat = 'Unrecorded';
        }
        statsElement.innerText = name + stat;
        return statsElement
    }

    function putDataInDocument(data){
        let dataArea = document.getElementById('data-box');
        dataArea.innerHTML = '';
        let stateTitle = document.createElement('h2');
        stateTitle.innerText = 'Data for ' + stateName(data['state'].toLowerCase())+':';
        dataArea.appendChild(stateTitle);
        
        // New Covid Cases Today
        dataArea.appendChild(addData('New Cases Today: ',data['positiveIncrease']));

        // Total Deaths Today
        dataArea.appendChild(addData('Total Deaths Today: ',data['deathIncrease']));

        // Cumulative Deaths
        dataArea.appendChild(addData('Cumulative deaths: ',data['death']));

        // Currently Hospitalized
        dataArea.appendChild(addData('Patients Currently Hospitalized: ',data['hospitalizedCurrently']));

        // COVID patients in ICU
        dataArea.appendChild(addData('Patient currently in ICU: ',data['inIcuCurrently']));
    };

    
    function makeGraph(dataArray, oldGraph){
        let days = [];
        let positive = [];
        let death = [];
        for (let day of dataArray){
            days.push(day['date']);
            death.push(day['death']);
            positive.push(day['positive']);
        }
        days.reverse()
        death.reverse()
        positive.reverse();
        // Destroy the old canvas/chart and create a new one.
        let oldChart = document.getElementById('line-chart');
        oldChart.parentNode.removeChild(oldChart);

        let newChart = document.createElement('canvas');
        newChart.width = "800";
        newChart.height = "450";
        newChart.id = "line-chart";

        document.getElementById('line-chart-div').appendChild(newChart);
        

        graph = new Chart(document.getElementById('line-chart'), {
            type: 'line',
            data: {
              labels: days,
              datasets: [{ 
                  data: positive,
                  label: "Total Cases",
                  borderColor: "#3e95cd",
                  fill: false
                }, { 
                  data: death,
                  label: "Total Deaths",
                  borderColor: "#8e5ea2",
                  fill: false
                }
              ]
            },
            options: {
              title: {
                display: true,
                text: 'Covid Data for ' + stateName(dataArray[0]['state'].toLowerCase())
              }
            }
          });
    }


    // Append the 'script' element to 'head'
    document.head.appendChild(script);
})


/***/ }),

/***/ "./src/scss/data.scss":
/*!****************************!*\
  !*** ./src/scss/data.scss ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/src??ref--4-2!../../node_modules/sass-loader/dist/cjs.js!./data.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js!./src/scss/data.scss");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ }),

/***/ "./src/scss/home.scss":
/*!****************************!*\
  !*** ./src/scss/home.scss ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/src??ref--4-2!../../node_modules/sass-loader/dist/cjs.js!./home.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js!./src/scss/home.scss");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ }),

/***/ 2:
/*!******************************!*\
  !*** multi ./src/js/data.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./src/js/data.js */"./src/js/data.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,